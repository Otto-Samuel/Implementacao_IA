import math
import numpy as np
from .mapa import mapa

# Mapeamento de s√≠mbolos do mapa para custo base de entrada na c√©lula.
# Valores maiores representam maior dificuldade/risco; infinito = intranspon√≠vel.
CUSTOS_TERRENO = {
    "üü©": 1.0, "üå≤": 2.0, "üüß": 2.5, "üü´": 4.0, "üåã": 5.0,
    "‚¨ú": 0.9, "üü®": 0.5, "üåä": math.inf, "üü¶": math.inf, "üèùÔ∏è ": math.inf,
    "üèîÔ∏è ": 4.0, "üåµ": 2.5, "üçü": 1.5, "üè†": 1.0, "üõ•Ô∏è ": 1.0, 
}

def custo_terreno(celula: str) -> float:
    """Retorna o custo base associado ao s√≠mbolo da c√©lula.

    Caso o s√≠mbolo n√£o esteja mapeado, assume custo intermedi√°rio (3.0)
    para manter o algoritmo robusto a novos √≠cones.
    """
    return CUSTOS_TERRENO.get(celula, 3.0)

# Penalidades de influ√™ncia por terrenos adjacentes
# Penalidades adicionais aplicadas ao custo do quadrado branco (‚¨ú)
# quando h√° vizinhos 8-conexos com esses s√≠mbolos. Representa o efeito
# de terrenos dif√≠ceis ao redor (areia, √°rvores, vulc√£o etc.) no trajeto.
INFLUENCIA_ADJACENTE = {
    "üü®": 0.3,   #? areia influencia equil√≠brio
    "üå≤": 0.2,   #? √°rvores, galhos atrapalham
    "üü´": 0.5,   #? rocha vulc√¢nica irregular
    "üåã": 1.0,   #? vulc√£o muito arriscado
    "üèîÔ∏è ": 0.5, #? montanhoso pr√≥ximo dificulta
    "üåµ": 0.4,   #? cactos, terreno √°rido
    "üö•":0.3,    #? semaforos,
    "üö¶":0.3,
    "ü•ö":0.2,
    "üßì":0.1,
    "üöî":0.8     # blitz 
}

def custo_efetivo(pos, mapa) -> float:
    """Custo efetivo da c√©lula, somando custo base e influ√™ncia de vizinhos.

    - Mant√©m infinito para c√©lulas intranspon√≠veis
    - Considera vizinhan√ßa 8-conexa (inclui diagonais)
    - Aplica amortecimento para evitar penalidades excessivas
    """
    x, y = pos
    linhas, colunas = mapa.shape
    base = custo_terreno(mapa[x, y])

    # Se a pr√≥pria c√©lula √© intranspon√≠vel, preserve infinito
    if base == math.inf:
        return base

    penalidade = 0.0
    # Percorre os 8 vizinhos (incluindo diagonais)
    for dx in (-1, 0, 1):
        for dy in (-1, 0, 1):
            if dx == 0 and dy == 0: # ignora a celula
                continue
            nx, ny = x + dx, y + dy
            # Verifica se o vizinho est√° dentro dos limites do mapa
            if 0 <= nx < linhas and 0 <= ny < colunas:
                cel = mapa[nx, ny]
                penalidade += INFLUENCIA_ADJACENTE.get(cel, 0.0)

    # Reduz metade da penalidade total para suavizar o efeito
    penalidade *= 0.5

    return base + penalidade

def heuristica_manhattan(a, b):
    return abs(a[0]-b[0]) + abs(a[1]-b[1])

def imprimir_mapa(caminho=None, explorados=None, posicoes=None):
    linhas, colunas = mapa.shape
    mapa_exibicao = mapa.copy()
    if explorados:
        for x, y in explorados:
            if posicoes and (x, y) not in posicoes.values():
                mapa_exibicao[x, y] = '‚¨õ'
    if caminho:
        for x, y in caminho:
            if posicoes and (x, y) not in posicoes.values():
                mapa_exibicao[x, y] = 'üü™'
    for linha in mapa_exibicao:
        print(''.join(linha))